# --- Install if missing ---
!pip install lime imblearn xgboost

# --- Import libraries ---
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from imblearn.over_sampling import SMOTE
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.decomposition import PCA
import lime
import lime.lime_tabular

# --- Load dataset ---
df = pd.read_csv('/content/online_shoppers_intention.csv')

print("Dataset shape:", df.shape)
print(df.head())
print(df.info())
print(df.describe())

# --- Data Cleaning & Handling Missing Values ---
print("\nMissing values per column:")
print(df.isnull().sum())

# Drop missing values if needed
# df.dropna(inplace=True)  # Uncomment if necessary

# --- Feature Engineering: Label Encoding Categorical Variables ---
cat_cols = ['Month', 'OperatingSystems', 'Browser', 'Region', 'TrafficType', 'VisitorType', 'Weekend', 'Revenue']
for col in cat_cols:
    if df[col].dtype == 'object':
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])

# Separate Features and Target
X = df.drop('Revenue', axis=1)
y = df['Revenue']

# --- EDA and Data Visualization ---
# Class Distribution
print("\nClass distribution:")
print(y.value_counts())
plt.figure(figsize=(6,4))
sns.countplot(x=y)
plt.title('Class Distribution')
plt.show()

# Correlation Matrix
plt.figure(figsize=(12,10))
corr = df.corr()
sns.heatmap(corr, annot=False, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Distribution of Numerical Columns
num_cols = ['Administrative', 'Administrative_Duration', 'Informational',
            'Informational_Duration', 'ProductRelated', 'ProductRelated_Duration',
            'BounceRates', 'ExitRates', 'PageValues', 'SpecialDay']

plt.figure(figsize=(15,10))
for i, col in enumerate(num_cols):
    plt.subplot(3, 4, i+1)
    sns.histplot(df[col], kde=True)
    plt.title(col)
plt.tight_layout()
plt.show()

# Distribution of Categorical Columns
cat_cols.remove('Revenue')  # already handled
plt.figure(figsize=(15,10))
for i, col in enumerate(cat_cols):
    plt.subplot(3, 3, i+1)
    sns.countplot(x=df[col])
    plt.title(col)
plt.tight_layout()
plt.show()

# --- Data Normalization ---
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# --- Train/Test Split ---
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# --- Handle Imbalanced Dataset with SMOTE ---
smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

print("\nClass distribution after SMOTE:")
print(pd.Series(y_train_smote).value_counts())
plt.figure(figsize=(6,4))
sns.countplot(x=y_train_smote)
plt.title('Class Distribution After SMOTE')
plt.show()

# --- Model Evaluation Function ---
def evaluate_model(model, X_train, y_train, X_test, y_test):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:,1] if hasattr(model, "predict_proba") else None

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

    if y_prob is not None:
        print("ROC AUC Score:", roc_auc_score(y_test, y_prob))

    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title('Confusion Matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

    return model, y_pred

# --- Initialize Models ---
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "SVM": SVC(probability=True, random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "KNN": KNeighborsClassifier(),
    "XGBoost": XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss'),
    "Bagging": BaggingClassifier(random_state=42)
}

# --- Train and Evaluate Models ---
results = {}
for name, model in models.items():
    print(f"\n{'='*50}")
    print(f"Evaluating {name}")
    print(f"{'='*50}")
    trained_model, y_pred = evaluate_model(model, X_train_smote, y_train_smote, X_test, y_test)
    results[name] = {'model': trained_model, 'accuracy': accuracy_score(y_test, y_pred)}

# --- Feature Selection ---
selector = SelectKBest(f_classif, k=10)
X_new = selector.fit_transform(X_scaled, y)
selected_features = X.columns[selector.get_support()]
print("\nSelected Features:")
print(selected_features)

X_train_fs, X_test_fs, y_train_fs, y_test_fs = train_test_split(X_new, y, test_size=0.3, random_state=42)
X_train_fs_smote, y_train_fs_smote = smote.fit_resample(X_train_fs, y_train_fs)

# --- Train Models with Feature Selection ---
results_fs = {}
for name, model in models.items():
    print(f"\n{'='*50}")
    print(f"Evaluating {name} with Feature Selection")
    print(f"{'='*50}")
    trained_model, y_pred = evaluate_model(model, X_train_fs_smote, y_train_fs_smote, X_test_fs, y_test_fs)
    results_fs[name] = {'model': trained_model, 'accuracy': accuracy_score(y_test_fs, y_pred)}

# --- PCA for Dimensionality Reduction ---
pca = PCA(n_components=0.95)
X_pca = pca.fit_transform(X_scaled)
print("\nNumber of components after PCA:", pca.n_components_)

X_train_pca, X_test_pca, y_train_pca, y_test_pca = train_test_split(X_pca, y, test_size=0.3, random_state=42)
X_train_pca_smote, y_train_pca_smote = smote.fit_resample(X_train_pca, y_train_pca)

# --- Train Models with PCA ---
results_pca = {}
for name, model in models.items():
    print(f"\n{'='*50}")
    print(f"Evaluating {name} with PCA")
    print(f"{'='*50}")
    trained_model, y_pred = evaluate_model(model, X_train_pca_smote, y_train_pca_smote, X_test_pca, y_test_pca)
    results_pca[name] = {'model': trained_model, 'accuracy': accuracy_score(y_test_pca, y_pred)}
